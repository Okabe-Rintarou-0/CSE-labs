#include <iostream>
#include <fstream>
#include <sstream>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>

#include <mutex>
#include <string>
#include <vector>
#include <map>
#include <unordered_map>

#include "rpc/rpc.h"
#include "mr_protocol.h"

using namespace std;

struct KeyVal {
    KeyVal(const string &key, const string &val) : key(key), val(val) {}

    string key;
    string val;
};

inline bool isLetter(char ch) {
    return (ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z');
}

int strHash(const string &str) {
    unsigned int hashVal = 0;
    for (char ch:str) {
        hashVal = hashVal * 131 + (int) ch;
    }
    return hashVal % REDUCER_COUNT;
}

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
vector <KeyVal> Map(const string &filename, const string &content) {
    // Copy your code from mr_sequential.cc here.
    unordered_map<std::string, int> wordFreq;
    string word;
    vector <KeyVal> keyVals;
    for (char ch:content) {
        if (isLetter(ch))
            word += ch;
        else if (word.size() > 0) {
            ++wordFreq[word];
            word.clear();
        }
    }
    for (auto entry:wordFreq) {
        keyVals.push_back(KeyVal(entry.first, to_string(entry.second)));
    }
    return keyVals;
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
string Reduce(const string &key, const vector <string> &values) {
    // Copy your code from mr_sequential.cc here.
    unsigned long long sum = 0;
    for (const string &value:values) {
        sum += atoll(value.c_str());
    }
    return to_string(sum);
}


typedef vector<KeyVal> (*MAPF)(const string &key, const string &value);

typedef string (*REDUCEF)(const string &key, const vector <string> &values);

class Worker {
public:
    Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf);

    void doWork();

private:
    void doMap(int index, const string &filename);

    void doReduce(int index);

    void doSubmit(mr_tasktype taskType, int index);

    void askTask(mr_protocol::AskTaskResponse &res);

    mutex mtx;
    int id;

    rpcc *cl;
    std::string basedir;
    MAPF mapf;
    REDUCEF reducef;
};


Worker::Worker(const string &dst, const string &dir, MAPF mf, REDUCEF rf) {
    this->basedir = dir;
    this->mapf = mf;
    this->reducef = rf;

    sockaddr_in dstsock;
    make_sockaddr(dst.c_str(), &dstsock);
    this->cl = new rpcc(dstsock);
    if (this->cl->bind() < 0) {
        printf("mr worker: call bind error\n");
    }
}

void Worker::askTask(mr_protocol::AskTaskResponse &res) {
    cl->call(mr_protocol::asktask, id, res);
}

void Worker::doMap(int index, const string &filename) {
    // Lab2: Your code goes here.
    string intermediate_prefix;
    intermediate_prefix = "mr-" + to_string(index) + "-";
    string content;
    ifstream file(filename);
    file >> content;

    cout << "read from file: " << filename << ", and its content is: " + content.substr(0, 5) << "..." << endl;

    vector <KeyVal> keyVals = Map(filename, content);
    vector <string> contents(REDUCER_COUNT);
    for (const KeyVal &keyVal:keyVals) {
        int reducerId = strHash(keyVal.key);
        contents[reducerId] += keyVal.key + ":" + keyVal.val + ";";
    }
}

void Worker::doReduce(int index) {
    // Lab2: Your code goes here.

}

void Worker::doSubmit(mr_tasktype taskType, int index) {
    bool b;
    mr_protocol::status ret = this->cl->call(mr_protocol::submittask, taskType, index, b);
    if (ret != mr_protocol::OK) {
        fprintf(stderr, "submit task failed\n");
        exit(-1);
    }
}

void Worker::doWork() {
    for (;;) {
        mr_protocol::AskTaskResponse res;
        askTask(res);
        switch (res.tasktype) {
            case MAP:
                cout << "worker: receive map task" << endl;
                doMap(res.index, res.filename);
                break;
            case REDUCE:
                cout << "worker: receive reduce task" << endl;
                break;
            case NONE:
                cout << "worker: receive no task" << endl;
                sleep(2);
                break;
        }
        // Lab2: Your code goes here.
        // Hints: send asktask RPC call to coordinator
        // if mr_tasktype::MAP, then doMap and doSubmit
        // if mr_tasktype::REDUCE, then doReduce and doSubmit
        // if mr_tasktype::NONE, meaning currently no work is needed, then sleep
        //

    }
}

int main(int argc, char **argv) {
    if (argc != 3) {
        fprintf(stderr, "Usage: %s <coordinator_listen_port> <intermediate_file_dir> \n", argv[0]);
        exit(1);
    }

    MAPF mf = Map;
    REDUCEF rf = Reduce;

    Worker w(argv[1], argv[2], mf, rf);
    w.doWork();

    return 0;
}

